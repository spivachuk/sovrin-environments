# -*- mode: ruby -*-
# vi: set ft=ruby :

# ////README////
#
# This Vagrantfile is designed to instantiate an Evernym Development Environment
# using Virtualbox as the vagrant provider and automates the following:
#
#  1. Clone all the required source code from github, or use clones you have
#     already created.
#    1.1. Source code should reside on the Virtualbox host (your desktop
#         environment) and be available in the Virtualbox guest as a "shared
#         folder". This allows the developer the option of using an IDE in their
#         own graphical desktop environment with their own license.
#    1.2. If you have not already cloned source, this Vagrant file assumes that
#         you have already forked the project and will prompt you for a username
#         and clone from "https://github.com/<username>/<project>.git" where
#         <username> is your username, and <project> is the target repo(s).
#  2. Install build tools/dependencies.
#  3. (Optional) Build source code on 'vagrant up'. Defaults to (N)o.
#  4. (Optional) Run unit tests on 'vagrant up'. Defaults to (N)o.
#
# //Prerequisites://
#  1. Install VirtualBox
#  2. Install Vagrant
#
# //How to use://
# Run 'vagrant up' and answer any questions this Vagrantfile or the Vagrant VM
# instance (i.e. network bridge) needs to complete the process. If you run into
# problems (i.e. shared folders, etc.), try 'vagrant reload --provision'. Doing
# so will restart the VM and re-run the provisioning script. A slightly more
# expensive operation would be to 'vagrant destroy' followed by 'vagrant up'.
#
# //Some details to be aware of://
#  1. All files and folders in the Vagrant project folder show up as shared
#     resources in /vagrant on all Vagrant VM(s)/guests instantiated by this
#     Vagrantfile. This is a design descision made by the Vagrant folks.
#  2. Source code will be cloned into this Vagrant project folder using the git
#     project name and then shared in /src/<git project name> in the Vagrant
#     guest VM(s). The .gitignore file in this Vagrant project folder ignores
#     these folders.
#  3. If you have your own source code clones, a symbolic link is
#     created in this Vagrant project folder. Doing so simplifies some discovery
#     logic in this Vagrantfile (ruby script). A side-effect of symlinking in
#     this Vagrant project folder is that the symlink is broken inside the
#     Virtualbox VM(s)/guests. Please do not remove or try to fix broken symlinks
#     in /vagrant in the Virtualbox VM(s)/guests. And be assured that the source
#     code associated with the symlinks on your Vagrant host are available in
#     /src/<git project name> in your Vagrant VM(s)/guests.

# //Make sure to be using the vagrant-vbguest plugin.//

development_box         = 'bento/ubuntu-16.04'
development_cpus        = '2'
development_memory      = '4096'
development_branch      = `git rev-parse --abbrev-ref HEAD`
development_run_build   = 'N'
development_run_tests   = 'N'
development_run_cleanup = 'N'

# Code should reside on the Vagrant host and be mounted to the Vagrant VM
# using Vagrant's Shared Folder feature. Doing so allows a developer to use
# their favorite IDE/tools to write code and have a cheap, fast way to build
# and test their changes.

# //Define development repos and setup default Shared Folder path.//
#
# If you do not want to develop one or more of the following repos, you can
# either remove a repo from the following associative array or can "Skip" the
# repo when prompted.
development_repos      = {
  "sovrin" => "/vagrant/sovrin",
  "indy-sdk" => "/vagrant/indy-sdk"
}

# //- Pseudocode -//
# For each 'repo' in development_repos
#   Detect 'repo' in Vagrant project directory root
#     If 'repo' detected
#       Use the default directory path when defining synced folder
#     Else
#       Prompt the user for one of two options:
#         Option 1: Skip - I will not be developing 'repo'
#           Go to next repo
#         Option 2: Enter path of 'repo' git clone on Vagrant host
#           Update the <path> for 'repo' => <path> in the development_repos
#           associative array
#         Option 3: Clone 'repo' for me. Note that this option requires that you
#                   to have a fork of the 'repo' codebase on github. The clone
#                   will be created in the root of this Vagrant project.
#                   - This option prompts the user for their github userid and
#                     builds the 'repo' URL.
#                   - It is important to note that the project default branch is
#                     the active branch after the clone is complete. It is up to
#                     the developer to change the branch if the project's default
#                     branch is not the branch they want.
#           Clone the repo
#             If failed to clone (404, etc.)
#               Exit with a verbose error message
username = ""
development_repos.each_pair { |key, value|
  filepath = File.expand_path(File.dirname(__FILE__))
  directory = File.join("#{filepath}", "#{key}")
  puts "Check if directory #{directory} exists..."
  if File.directory?("#{directory}")
    puts "Directory #{directory} exists. Will mount #{directory} as "\
      "/src/#{key}"
    development_repos["#{key}"] = "#{directory}"
  else
    prompt = "> "
    puts "Unable to detect a clone of repo '#{key}'. What would you like to do?"
    puts "\t1. Skip - I will not be developing/testing code for #{key}."
    puts "\t2. Enter a full path to repo '#{key}' on my Vagrant host."
    puts "\t3. I have forked '#{key}'. Clone it for me."
    print prompt

    loop do
      user_input = $stdin.gets.chomp
      case user_input
      when "1"
        puts "Skipping..."
        development_repos.delete('#{key}')
        break
      when "2"
        puts "Enter a full path to repo '#{key}' on your Vagrant host."
        print prompt
        absolute_path = $stdin.gets.chomp
        if !File.directory?(absolute_path)
          $stderr.puts "#{absolute_path} does not exist."
          exit 1
        else
          puts "Verified #{absolute_path} exists..."
        end
        development_repos["#{key}"] = absolute_path
        puts "Creating symbolic link '#{key}' in Vagrant project to #{absolute_path}..."
        require 'open3'
        stdout, stderr, status = Open3.capture3("ln -sf #{absolute_path} #{directory}")
        if status.exitstatus != 0
          $stderr.puts "Failed to create sybolic link"
          $stderr.puts stderr
          exit 1
        end
        break
      when "3"
        if username == ""
          puts "Enter your github username."
          print prompt
          username = $stdin.gets.chomp
        end
        url = "https://github.com/#{username}/#{key}.git"
        puts "Cloning repo '#{url}' on your Vagrant host."
        puts "The default project branch will be checked out. Please be sure you "\
          "are on the branch you want."
        require 'open3'
        stdout, stderr, status = Open3.capture3("git clone #{url}")
        if status.exitstatus != 0
          $stderr.puts "Failed to clone #{url}"
          $stderr.puts stderr
          exit 1
        end
        break
      else
        puts "Please select either 1, 2, or 3"
        print prompt
      end
    end
  end
}

if ARGV.include?("up")
  development_run_cleanup = "Y"
end

if ARGV.include?("up") || ARGV.include?("provision") || ARGV.include?("--provision")
  puts "Bringing up VM(s)..."
  prompt = "> "
  puts "Build source? (y/N)"
  print prompt

  loop do
    user_input = $stdin.gets.chomp
    case user_input
    when "Y"
    when "y"
      puts "Code will be built during VM provisioning..."
      development_run_build = "Y"
      break
    when "N"
    when "n"
    when ""
      puts "Code will NOT be built during VM provisioning..."
      development_run_build = "N"
      break
    else
      puts "Please enter Y, y, N, or n"
      print prompt
    end
  end

  # Only run tests if a build will be performed.
  puts development_run_build
  if development_run_build == "Y"
    puts "Run tests? (y/N)"
    print prompt

    loop do
      user_input = $stdin.gets.chomp
      case user_input
      when "Y"
      when "y"
        puts "Test will be run during VM provisioning..."
        development_run_tests = 'Y'
        break
      when "N"
      when "n"
      when ""
        puts "Tests will NOT be run during VM provisioning..."
        development_run_tests = 'N'
        break
      else
        puts "Please enter Y, y, N, or n"
        print prompt
      end
    end
  end
end

$script = <<SCRIPT
#!/bin/bash -e

BRANCH=$1
RUN_BUILD=$2
RUN_TESTS=$3
RUN_CLEANUP=$4
echo "Setting up development environment for branch $BRANCH"
echo "Run build? $RUN_BUILD"
echo "Run tests? $RUN_TESTS"
echo "Run cleanup? $RUN_CLEANUP"

#--------------------------------------------------------
echo 'Setting Up Networking'
if [ -f /vagrant/etc/hosts ]; then
  cp /vagrant/etc/hosts /etc/hosts
fi
perl -p -i -e 's/(PasswordAuthentication\s+)no/$1yes/' /etc/ssh/sshd_config
service sshd restart

#--------------------------------------------------------
echo "Installing Required Packages"
apt-get update
apt-get install -y software-properties-common python-software-properties
apt-get update
DEBIAN_FRONTEND=noninteractive apt-get install -y \
    curl \
    dialog \
    figlet \
    python-pip \
    python3-pip \
    python3.5-dev \
    libsodium18 \
    unzip \
    make \
    screen \
    tmux \
    vim \
    wget


#--------------------------------------------------------
echo "Install docker..."
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
sudo apt-get install -y docker-ce

#--------------------------------------------------------
# The following steps were derived from:
# https://github.com/hyperledger/indy-sdk/blob/master/doc/ubuntu-build.md
#
echo "Installing Rust and rustup non-interactively as user vagrant..."
echo "Note that rustup typically runs interactively and allows you to "
echo "customize installation. Defaults are used in this case. You can "
echo "reinstall Rust and rustup if you would like. See the following URL "
echo "for details: https://www.rust-lang.org/install.html"
curl https://sh.rustup.rs -sSf > rust.install.sh
chmod u+x ./rust.install.sh
chown vagrant:vagrant ./rust.install.sh
su -c "./rust.install.sh -y" vagrant

apt-get install -y \
   build-essential \
   pkg-config \
   cmake \
   libssl-dev \
   libsqlite3-dev \
   libsodium-dev

#--------------------------------------------------------
# Build
#
# For some reason, sourcing the vagrant users .profile isn't working.
# Must use the absolute path to /home/vagrant/.cargo/bin/cargo to get
# the build to work.
#
# Sourcing the /home/vagrant/.profile file as root didn't work
#  source /home/vagrant/.profile
if [ "$RUN_BUILD" == "Y" ]; then
  cd /src/indy-sdk/libindy
  su -c "/home/vagrant/.cargo/bin/cargo build" vagrant
fi

#--------------------------------------------------------
# Run tests?
if [ "$RUN_TESTS" == "Y" ]; then
  cd /src/indy-sdk
  docker build -f ci/indy-pool.dockerfile -t indy_pool .
  docker run -itd -p 9701-9708:9701-9708 indy_pool
  cd /src/indy-sdk/libindy
  su -c "RUST_TEST_THREADS=1 /home/vagrant/.cargo/bin/cargo test" vagrant
fi

#--------------------------------------------------------
if [ "$RUN_CLEANUP" == "Y" ]; then
  echo 'Cleaning Up'
  rm /etc/update-motd.d/10-help-text
  rm /etc/update-motd.d/97-overlayroot
fi

apt-get update
#DEBIAN_FRONTEND=noninteractive apt-get upgrade -y
updatedb
SCRIPT

Vagrant.configure("2") do |config|

  config.vm.define "development" do |development|
    development.vm.box = development_box
    development.vm.host_name = "development.sandbox.evernym.lab"
    development.vm.network 'public_network'
    development.ssh.private_key_path = '~/.vagrant.d/insecure_private_key'
    development.ssh.insert_key = false
    development.vm.provider "virtualbox" do |vb|
      vb.name   = "sandbox-development"
      vb.gui    = false
      vb.memory = development_memory
      vb.cpus   = development_cpus
      vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
    end
    development.vm.provision "shell" do |s|
      s.inline = $script
      s.args   = [
        development_branch,
        development_run_build,
        development_run_tests,
        development_run_cleanup
      ]
    end
    development_repos.each do |key, value|
      print "Setup synced folder: development.vm.synced_folder '#{value}', '/src/#{key}'\n"
      development.vm.synced_folder "#{value}", "/src/#{key}"
    end
  end

end
